// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://quarto.fr/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://quarto.fr/support",
            "email": "support@quarto.fr"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ai/solve": {
            "post": {
                "description": "Analyzes the current game state and returns the optimal move using minimax algorithm",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI"
                ],
                "summary": "Find the best move using AI",
                "parameters": [
                    {
                        "description": "Solve request containing game history and search depth",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aiHandler.SolveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Best move and evaluation score",
                        "schema": {
                            "$ref": "#/definitions/aiHandler.SolveResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid format, depth, move history, or game state",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Logs in a user using email/password or token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login form",
                        "name": "loginForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authHandler.LoginForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "token and user details",
                        "schema": {
                            "$ref": "#/definitions/authHandler.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/authHandler.LoginError400"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/authHandler.LoginError403"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logs out the user by revoking their token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authHandler.LogoutResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/authHandler.LogoutError401"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Get details of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authHandler.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/authHandler.MeError"
                        }
                    }
                }
            }
        },
        "/auth/recover": {
            "post": {
                "description": "Generates a recovery token for the user to reset their password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Account Recovery",
                "parameters": [
                    {
                        "description": "Account recovery form",
                        "name": "askRecoverForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authHandler.AskRecoverForm"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/authHandler.RecoverResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/authHandler.RecoverError400"
                        }
                    }
                }
            }
        },
        "/auth/reset_password": {
            "post": {
                "description": "Reset the password for a user using a recovery token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "Password Reset Form",
                        "name": "passwordResetForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authHandler.PasswordResetForm"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/authHandler.PasswordResetResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/authHandler.PasswordResetError400"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/authHandler.PasswordResetError403"
                        }
                    }
                }
            }
        },
        "/auth/signout": {
            "post": {
                "description": "Sign out the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign out user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Signout form",
                        "name": "signoutForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authHandler.SignoutForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authHandler.SignoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/authHandler.SignoutError400"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/authHandler.SignoutError403"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Create a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Signup a new user",
                "parameters": [
                    {
                        "description": "Signup form",
                        "name": "signupForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authHandler.SignupForm"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/authHandler.SignupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/authHandler.SignupError400"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/authHandler.SignupError409"
                        }
                    }
                }
            }
        },
        "/challenge/my": {
            "get": {
                "description": "Get all challenges sent and received by the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Get my challenges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/challenge.ChallengeListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/challenge/respond": {
            "post": {
                "description": "Accept or decline a challenge",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Respond to challenge",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Response to challenge",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/challenge.RespondToChallengeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/challenge.ChallengeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/challenge/send": {
            "post": {
                "description": "Send a challenge to another player",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "challenges"
                ],
                "summary": "Send challenge",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Send challenge request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/challenge.SendChallengeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/challenge.Challenge"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/game/my": {
            "get": {
                "description": "Get all games for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Get my games",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Game status filter (active, finished)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/game.Game"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/game/{id}": {
            "get": {
                "description": "Get a game by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Get game",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/game.Game"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/game/{id}/forfeit": {
            "post": {
                "description": "Forfeit the current game",
                "tags": [
                    "games"
                ],
                "summary": "Forfeit game",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/game.Game"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/game/{id}/place-piece": {
            "post": {
                "description": "Place a piece on the board",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Place piece",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Place piece request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game.PlacePieceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/game.Game"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/game/{id}/select-piece": {
            "post": {
                "description": "Select a piece for the next move",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Select piece",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Select piece request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game.SelectPieceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/game.Game"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get paginated list of users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default: 20, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.UserPaginationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get user information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "Quarto-Connect-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.UserPublic"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "Establish WebSocket connection for real-time communication",
                "tags": [
                    "websocket"
                ],
                "summary": "WebSocket connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Game ID (required for game-specific communication)",
                        "name": "game_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Session token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "aiHandler.SolveRequest": {
            "type": "object",
            "properties": {
                "depth": {
                    "type": "integer"
                },
                "history": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "selected_piece": {
                    "$ref": "#/definitions/game.Piece"
                }
            }
        },
        "aiHandler.SolveResponse": {
            "type": "object",
            "properties": {
                "best_move": {
                    "type": "string"
                },
                "continuation": {
                    "description": "Liste des coups de la continuation",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "score": {
                    "type": "integer"
                },
                "suggested_piece": {
                    "description": "Pièce suggérée pour l'adversaire au coup suivant",
                    "type": "integer"
                }
            }
        },
        "authHandler.AskRecoverForm": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "authHandler.LoginError400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Please fully fill in the login form"
                }
            }
        },
        "authHandler.LoginError403": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid email or password"
                }
            }
        },
        "authHandler.LoginForm": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "authHandler.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string"
                        },
                        "id": {
                            "type": "integer"
                        },
                        "username": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "authHandler.LogoutError401": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid session"
                }
            }
        },
        "authHandler.LogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Logged out successfully"
                }
            }
        },
        "authHandler.MeError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Incorrect token"
                }
            }
        },
        "authHandler.PasswordResetError400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Please fully fill in the password reset form"
                }
            }
        },
        "authHandler.PasswordResetError403": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid recover token"
                }
            }
        },
        "authHandler.PasswordResetForm": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "authHandler.PasswordResetResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Password reset successfully"
                }
            }
        },
        "authHandler.RecoverError400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Please fully fill in the account recovery form"
                }
            }
        },
        "authHandler.RecoverResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Recovery token created successfully"
                }
            }
        },
        "authHandler.SignoutError400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Empty password"
                }
            }
        },
        "authHandler.SignoutError403": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid password"
                }
            }
        },
        "authHandler.SignoutForm": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "authHandler.SignoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Signout successful"
                }
            }
        },
        "authHandler.SignupError400": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Please fully fill in the signup form"
                }
            }
        },
        "authHandler.SignupError409": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Email not available"
                }
            }
        },
        "authHandler.SignupForm": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "Password123!"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "authHandler.SignupResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Signup successful"
                }
            }
        },
        "authHandler.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "challenge.Challenge": {
            "type": "object",
            "properties": {
                "challenged_id": {
                    "type": "integer"
                },
                "challenger_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "game_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "responded_at": {
                    "type": "string"
                },
                "status": {
                    "description": "pending, accepted, declined, expired, cancelled",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "challenge.ChallengeListResponse": {
            "type": "object",
            "properties": {
                "received": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/challenge.Challenge"
                    }
                },
                "sent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/challenge.Challenge"
                    }
                }
            }
        },
        "challenge.ChallengeResponse": {
            "type": "object",
            "properties": {
                "challenge": {
                    "$ref": "#/definitions/challenge.Challenge"
                },
                "game": {}
            }
        },
        "challenge.RespondToChallengeRequest": {
            "type": "object",
            "required": [
                "challenge_id"
            ],
            "properties": {
                "accept": {
                    "type": "boolean"
                },
                "challenge_id": {
                    "type": "string"
                }
            }
        },
        "challenge.SendChallengeRequest": {
            "type": "object",
            "required": [
                "challenged_id"
            ],
            "properties": {
                "challenged_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "game.Game": {
            "type": "object",
            "properties": {
                "available_pieces": {
                    "description": "List of available pieces (1-16)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/game.Piece"
                    }
                },
                "board": {
                    "description": "4x4 matrix of Piece",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/game.Piece"
                        }
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "current_turn": {
                    "description": "ID of the player whose turn it is",
                    "type": "integer"
                },
                "game_phase": {
                    "description": "0 = \"selectPiece\", 1 = \"placePiece\"",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "move_history": {
                    "description": "List of moves made in the game",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/game.Move"
                    }
                },
                "player1_id": {
                    "type": "integer"
                },
                "player2_id": {
                    "type": "integer"
                },
                "selected_piece": {
                    "description": "Current piece to place",
                    "allOf": [
                        {
                            "$ref": "#/definitions/game.Piece"
                        }
                    ]
                },
                "status": {
                    "description": "0 = \"playing\", 1 = \"finished\"",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "winner": {
                    "description": "ID of the winner (0 if draw)",
                    "type": "integer"
                }
            }
        },
        "game.Move": {
            "type": "object",
            "properties": {
                "piece": {
                    "description": "ID de la pièce sélectionnée par l'adversaire (0-15)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/game.Piece"
                        }
                    ]
                },
                "position": {
                    "description": "Position où placer la pièce sélectionnée",
                    "allOf": [
                        {
                            "$ref": "#/definitions/game.Position"
                        }
                    ]
                }
            }
        },
        "game.Piece": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                -1
            ],
            "x-enum-varnames": [
                "PieceWhiteSquareLargeFilled",
                "PieceWhiteSquareLargeEmpty",
                "PieceWhiteSquareSmallFilled",
                "PieceWhiteSquareSmallEmpty",
                "PieceWhiteCircleLargeFilled",
                "PieceWhiteCircleLargeEmpty",
                "PieceWhiteCircleSmallFilled",
                "PieceWhiteCircleSmallEmpty",
                "PieceBlackSquareLargeFilled",
                "PieceBlackSquareLargeEmpty",
                "PieceBlackSquareSmallFilled",
                "PieceBlackSquareSmallEmpty",
                "PieceBlackCircleLargeFilled",
                "PieceBlackCircleLargeEmpty",
                "PieceBlackCircleSmallFilled",
                "PieceBlackCircleSmallEmpty",
                "PieceEmpty"
            ]
        },
        "game.PlacePieceRequest": {
            "type": "object",
            "required": [
                "position"
            ],
            "properties": {
                "position": {
                    "type": "string"
                }
            }
        },
        "game.Position": {
            "type": "object",
            "properties": {
                "col": {
                    "type": "integer"
                },
                "row": {
                    "type": "integer"
                }
            }
        },
        "game.SelectPieceRequest": {
            "type": "object",
            "required": [
                "piece_id"
            ],
            "properties": {
                "piece_id": {
                    "$ref": "#/definitions/game.Piece"
                }
            }
        },
        "user.UserPaginationResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.UserPublic"
                    }
                }
            }
        },
        "user.UserPublic": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Quarto API",
	Description:      "This is the Quarto API documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
